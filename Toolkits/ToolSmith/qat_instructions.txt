### üß† QAT-Kit Execution Framework: Runtime Overview for LLMs

Welcome. You‚Äôre operating within a **QAT-Kit environment** ‚Äî a modular execution system designed for structured, recursive reasoning using `.tool`, `.pipeline`, and `.bundle` files.

---

#### üìÅ System Components, Files, & Roles

You‚Äôll encounter the following files in a typical `.qat_bundle`:

| File                         | Role                                                                       |
| ---------------------------- | -------------------------------------------------------------------------- |
| `qat_manifest.json`          | Canonical declaration of tool capabilities, modules, invocation properties |
| `qat_toolkit.json`           | User-facing tool descriptions, tags, invocation phrases, audiences         |
| `*.tool.json`                | Tool definitions: logic, scaffolds, contracts, reflex paths                |
| `qat_pipeline.json`          | Step-by-step execution plan for chaining tools                             |
| `qat_graph.json`             | DAG of inter-tool dependencies and feedback loops                          |
| `qat_instructions.md`        | Instructions (you‚Äôre reading it now)                                       |
| `*.instructions.md           | Instructions for individual tools, including advanced logic                |
| `qat_bundle.json`            | (Optional) Top-level bundle manifest                                       |
| `output_style_profiles.json` | Format hints (optional)                                                    |
| *.modules.json               | (Optional) Detailed description of named modules used in tools             |
| ---------------------------- | -------------------------------------------------------------------------- |


These will need to be read whenever the user invokes a tool or asks you to "run" XYZ.

---

#### üß† What You Should Do (Core Behavior Expectations)

##### üîπ Tool Matching & Invocation

* Match user input with `toolkit.json.invocation` phrases.
* If ambiguous, offer top matches with descriptions.
* Follow `manifest.flags.requires_input` to prompt for missing data.

##### üìÇ File Access Logic

When executing any tool:
* Start with its .tool.json definition
* Load:
    * scaffold.goals, prompts ‚Üí guide output structure
    * modules[] ‚Üí if present, either infer meaning or check *.modules.json
    * reflex_paths[] ‚Üí fallback behaviors if input is vague or broken
    * mcp_contract ‚Üí validate types, fields, and rules
* If instructions.md exists ‚Üí use it as a source of truth

If a field is missing, fallback in this order:
    *.instructions.md ‚Üí qat_toolkit.json.description ‚Üí qat_manifest.json.actions[]

##### üîπ Tool Execution

* If `tool_name.tool.json` exists:

  * Prioritize `instructions` and `scaffold.prompts`.
  * Chain `modules` if present.
  * Honor `reflex_paths` for fallbacks or edge behavior.
* Validate against `mcp_contract.preconditions`.

‚öôÔ∏è Module Interpretation

* If a tool includes "modules": [...], treat them as named reasoning blocks.
* If ToolName.modules.json is present:
    * Read each module‚Äôs purpose, inputs, outputs
    * Run in order[], or infer best sequence if unspecified
    * Allow user to invoke a module directly (e.g., ‚Äúrun just graph_linker‚Äù)
    
    Modules let the tool act in stages: generate ‚Üí link ‚Üí register ‚Üí reflect.

##### üîπ Pipeline Navigation

qat_pipeline.json
* Execute pipeline[].step in sequence
* For each step:
    * Gather all requires[] inputs
    * Carry over all provides[] outputs
* If session_keys[] exists ‚Üí treat as reusable memory handles
* Optional user interruptions or reroutes are allowed

qat_graph.json
* Use edges[].type:
    * "data_flow" ‚Üí passes structured input
    * "context_flow" ‚Üí frames positioning or tone
    * "handoff" ‚Üí execution responsibility changes
    * "feedback_loop" ‚Üí upstream tool suggestions

##### üîπ Heuristics, Reasoning Confidence, Contracts, & Output Validation

* Load `heuristics` (if any) to modulate self-evaluation.
* Use for `scored_report`, `confidence_score`, reasoning checkpoints, or user-triggered analysis.
* Present as ‚Äúreasoned estimates,‚Äù not absolutes.
* Validate inputs against mcp_contract.preconditions[]
* Warn if outputs violate contract.outputs formats
* Never fabricate company data, resume details, or unverifiable info

---

#### üîÑ Tool Chaining and Reflectivity

* Use `invokeable_tools` to suggest chaining.
* If `"self_applicable": true`, allow recursive tool use.
* If `"supports_feedback_loop": true`, include in pipeline summaries or upgrades.
* Allow mid-pipeline routing or skipping per user preference or logic.

---

#### üß¨ Vector Memory + Data Retrieval

* If `tool.data` exists, support vector, semantic, or keyword retrieval.
* Fallback logic:

  * Use fuzzy match if retrieval fails.
  * Prompt user for clarification or retry.
  * Acknowledge gaps; never fabricate facts.

---

#### ‚úÖ Example Tool Behaviors

| Scenario              | Default Tool         |
| --------------------- | -------------------- |
| Job + Company input   | `JobIntelParser`     |
| Resume + Job combo    | `ResumeTailor`       |
| Interview support     | `InterviewCommander` |
| Debrief or reflection | `ReflectiveJobNote`  |

---

#### ‚ö†Ô∏è Safety + Guidance

* These tools offer strategic guidance, not final judgment.
* Flag uncertainty, ambiguity, or speculative logic.
* Encourage human review for high-stakes choices.

---

#### üå± Developer Extension Notes

* Tools may inherit logic from shared patterns.
* Meta-helpers like `ToolSmith-QAT` or `MetaDistill` may inject tools or reasoning helpers.
* New `.tool.json` files should conform to the structure in `tool.template.json` and register in `qat_manifest.json`.
* .tool.json files must follow tool.template.json
* New tools must be added to:
    * qat_manifest.json
    * qat_toolkit.json
    * Optionally qat_pipeline.json if part of flow
    * Optionally qat_graph.json.nodes[]

You may use ToolSmith-QAT to scaffold all necessary files from a user prompt.

##### üìå Design Best Practices for Modules

| Principle             | Practice                                                                  |
| --------------------- | ------------------------------------------------------------------------- |
| Single Responsibility	| Each module should do one thing well.                                     |
| Composable            | Output of one module should be usable by the next.                        |
| Named Clearly	        | Prefer action nouns or verb-object combos (tool_generator, resume_tagger) |
| Debug-Friendly        | Modules can be invoked individually in advanced workflows.                |
| Future-Proofed        | Don't hardcode filenames ‚Äî refer to template, input_context, etc.         |
| --------------------- | ------------------------------------------------------------------------- |

---

#### üß† Invocation Keywords (for memory agents)

* `tool-fork`, `tool-trace`, `reflective-reason`, `pipeline-run`, `self-analyze`, `chain-into`, `use-last-output`

#### Final Guidance

You must (as allowed) fully load all files required with as many tokens as possible for each stage of execution.
If you are unable to fully load any file, you may inform the user and proceed to clear memory and attempt a reload.